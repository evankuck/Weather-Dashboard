// Personal API key was generated, const key created and posted here, allows API data to be added to my app
const apikey = "401908c5d78b5ea7ed945ee0817b0f6a"

// WHEN I view current weather conditions for that city
// THEN I am presented with the city name, 
// the date, 



// WHEN I search for a city
// THEN I am presented with current and future conditions for that city and that city is added to the search history

// GIVEN a weather dashboard with form inputs
// Creates button that gets the variable generated by getLatLonByCityState
const submitButton = $("#submitButton")
submitButton.on("click", getLatLonByCityState)


// call function at the beginning as well
getLatLonByCityState()


// Creates the function "space" on the page that'll be populated by the API's data
function createForecastColumns(data) {
    console.log({
        data
    })
    //Creates the actual columns for the API's data
    const container = $("#forecastContainer").html("")
    //iterating through the data
    for (let i = 0; i < data.length; i++) {
        //creating the column like you would in HTML
        const column = $("<div>").addClass("column p-3")
        // add weather data, the dot notation is basically digging deeper into the data to find the relevant info
        const weatherType = data[i].weather[0].main
        // displaying the weather through images
        const weatherDisplay = $("<img>").addClass("")
        // defining the source of the images

        // an icon representation of weather conditions
        let src = ""
        switch (weatherType) {
            case "Rainy":
                src ="https://www.flaticon.com/free-icon/rain_116251"
            case "Sunny":
                src = "https://www.flaticon.com/free-icon/sunny_136723"
            case "Partly Cloudy":
                src = "https://www.flaticon.com/premium-icon/partly-cloudy_4899782?term=partly%20cloudy&page=1&position=1&page=1&position=1&related_id=4899782&origin=style"
            case "Cloudy":
                src = "https://www.flaticon.com/free-icon/cloud_899718?term=cloudy&page=1&position=5&page=1&position=5&related_id=899718&origin=style"
            default:
                src = "https://via.placeholder.com/200"

        }

        weatherDisplay.attr("src", src)


        // the temperature
        // add high/low
        const highTemperature = data[i].temp.max
        const lowTemperature = data[i].temp.min
        const tempDisplay = $("<div>").text(`${highTemperature} / ${lowTemperature}`)

        // the humidity, 
        const humidityDisplay = $("<div>").text(data[i].humidity)

        // the wind speed,
        const windSpeedDisplay = $("<div>").text(data[i].wind_speed)

        

        // WHEN I view the UV index
        // THEN I am presented with a color that indicates whether the conditions are favorable, moderate, or severe
        // and the UV index
        // add uv (do a couple if statements that will add conditionally the classes favorable, moderate, and severe which will be color coded in CSS classes)

        const uvIndex = data[i].uvi
        const uvDisplay = $("<div>").text(uvIndex)
        if (uvIndex >= 0 && uvIndex <= 2) {
            uvDisplay.css("background-color", "#00FF00"); //green for favorable
        } else if (uvIndex >= 3 && uvIndex <= 7) {
            uvDisplay.css("background-color", "#FFA500"); //orange for moderate
        } else if (uvIndex >= 8 && uvIndex <= 12) {
            uvDisplay.css("background-color", "#ff0000"); //red for severe
        } else {
            uvDisplay.css("background-color", "#FFFFFF");
        }


        // and then append to column
        column.append(weatherDisplay)
        column.append(tempDisplay)
        column.append(humidityDisplay)
        column.append(windSpeedDisplay)
        column.append(uvDisplay)
        //append column to container
        container.append(column)
    }
}

function getLatLonByCityState(event) {
    if (event) {
        event.preventDefault()
    }
    const string = $("#cityInput").val()
    const arg1 = string.split(",")[0]
    const arg2 = string.split(",")[1]
    let city = ""
    let state = ""
    if (arg1 && arg2) {
        city = arg1
        state = arg2
        localStorage.setItem("mostRecent", `${city},${state}`)
    } else {
        const mostRecentCityState = localStorage.getItem("mostRecent") // should give us a City,State combo
        city = mostRecentCityState.split(",")[0]
        state  = mostRecentCityState.split(",")[1]
    }
    console.log(city, state);
    
    
    
    $.ajax(`http://api.openweathermap.org/geo/1.0/direct?q=${city},${state},US&limit=1&appid=${apikey}`)
        .then(function (data) {
            console.log(data)
            const {
                lat,
                lon
            } = data[0] // destructure syntax
            //  const lat = data[0].lat
            //  const lon = data[0].lon
            getForecastByLatLon(lat, lon)
        })
}

function getForecastByLatLon(lat, lon) {
    $.ajax(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&appid=${apikey}`)
        .then(function (data) {
            console.log(data)
            const dailyWeather = data.daily
            console.log({
                dailyWeather
            })
            createForecastColumns(dailyWeather)
        })
}











// WHEN I view future weather conditions for that city
// THEN I am presented with a 5-day forecast that displays the date, an icon representation of weather conditions, the temperature, and the humidity

// WHEN I click on a city in the search history
// THEN I am again presented with current and future conditions for that city

// WHEN I open the weather dashboard
// THEN I am presented with the last searched city forecast